#!/bin/bash
# Downloads and extracts the latest ZOSOpenTools releases from GitHub

export utildir="$( cd "$(dirname "$0")" >/dev/null 2>&1 && pwd -P )"

. "${utildir}/common.inc"

printSyntax() 
{
  args=$*
  echo "zopen-download is a tool that downloads and extracts the latest z/OS Open Tools releases from GitHub Releases." >&2
  echo "Syntax: zopen-download [<option>]*" >&2
  echo "  where <option> may be one or more of:" >&2
  echo "  -d <dir>: directory to download binaries to.  Uses current working directory if not specified." >&2
  echo "  -r <repo>: specific repo name to download. Downloads all ZOSOpenTools if not specified." >&2
}

args=$*
download=$PWD
while [[ $# -gt 0 ]]; do
  case "$1" in
    "-d")
      download=$2;
      shift
      ;;
    "-r")
      toolrepo=$2;
      shift
      ;;
    "--list")
      list=1;
      ;;
    "-h" | "--h" | "-help" | "--help" | "-?" | "-syntax")
      printSyntax "${args}"
      exit 4
      ;;
    *)
      printError "Unknown option ${arg} specified"
      ;;
  esac
  shift;
done

if [ ! -d "${download}" ]; then
  mkdir -p "${download}"
fi

if [ ! -z "${download}" -a -d "${download}" ]; then
  cd "${download}"
fi

#FIXME: Once jq is ported, rewrite with jq
if ! repo_results=$(curl -k -s "https://api.github.com/users/ZOSOpenTools/repos?per_page=100" 2>/dev/null | grep "\"full_name\":" | cut -d '"' -f 4); then
  printError "curl command could not download the z/OS Open Tools repository list"
fi

for repo in $(echo ${repo_results}); do
  repo=${repo#"ZOSOpenTools/"}
  if [ -z $toolrepo ] || [ "${toolrepo}" = "${repo}" ]; then
    name=${repo%port}
    if [ "${repo}" = "${name}" ]; then
      continue;
    fi
    if [ ! -z "$list" ]; then
      echo "$repo"
      continue;
    fi
    printHeader "Downloading latest release from $repo"
    if ! latest_url=$(curl -k -s https://api.github.com/repos/ZOSOpenTools/${repo}/releases/latest 2>/dev/null | grep browser_download_url | cut -d '"' -f 4); then
      printError "Could not find the latest url for $repo"
    fi

    if [ -z $latest_url ]; then
      printWarning "No releases published for $repo"
      continue
    fi

    if ! curl -k -L ${latest_url} -O 2>/dev/null; then
      printError "Could not download ${latest_url}"
    fi

    pax=$(basename ${latest_url})
    if [ ! -f "${pax}" ]; then
      printError "${pax} was not actually downloaded?"
    fi

    printHeader "Extracting $pax"
    if ! pax -rf $pax 2>/dev/null; then
      printWarning "Could not extract $pax. Skipping"
      continue;
    fi
    rm -f "${pax}"
    dirname=${pax%.pax.Z}
    if [ -L $name ]; then
      rm $name
    fi 
    if ! ln -s $dirname $name; then
      printError "Could not create symbolic link name"
    fi 
  fi
done
