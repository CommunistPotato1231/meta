#!/bin/sh
#
# General purpose zopen script
#
ME=$(basename $0)

printSyntax()
{
  printInfo "" >&2
  printInfo "Syntax: zopen [options] <command>" >&2
  printInfo "where <options> may be one of the following:" >&2
  printInfo "  --version       print product version" >&2
  printInfo "  --help          print this help" >&2
  printInfo "where <command> may be one of the following:" >&2
  printInfo "  init            generate \$rootfs/etc/zopen-config, creates file structure and bootstraps" >&2
  printInfo "  build           invokes the build script." >&2
  printInfo "  download        downloads z/OS Open Tools package(s)" >&2
  printInfo "  install         installs z/OS Open Tools package(s))" >&2
  printInfo "  generate        generate a zopen project" >&2
  printInfo "  update-cacert   update the cacert.pem file" >&2
  printInfo "  upgrade         upgrades already installed tools" >&2
  printInfo "  list            lists information about z/OS Open Tools packages" >&2
  printInfo "  query           queries z/OS Open Tools packages" >&2
  printInfo "  search          searches remote repo for z/OS Open Tools package" >&2
  printInfo "  remove          removes installed z/OS Open Tools packages" >&2
  printInfo "  alt             switch local versions of z/OS Open Tools packages" >&2
  printInfo "  clean           cleans various aspects of z/OS Open Tools packages" >&2
  echo "" >&2
}

printHelp() 
{
  args=$*
  echo "zopen is a general purpose script to be used with the z/OS Open Tools ports." >&2
  printSyntax
  echo "Example usage:" >&2
  echo " # Install the 'which' utility package" >&2
  echo " zopen install which" >&2
  echo " # List available packages to download" >&2
  echo " zopen list" >&2
  echo " # List currently installed packages" >&2
  echo " zopen list --installed" >&2
  echo " # Generate a zopen template project" >&2
  echo " zopen generate" >&2
}

export bindir="$( cd "$(dirname "$0")" >/dev/null 2>&1 && pwd -P )"

export PATH="${bindir}:${PATH}"
ZOPEN_DONT_PROCESS_CONFIG=1
. "${bindir}/lib/common.inc"

args=$*
legacy=false
while [[ $# -gt 0 ]]; do
  case "$1" in
    "--legacy")
      shift
      legacy=true
    ;;
    "alt")
      shift
      exec "${bindir}/lib/zopen-alt" $@
      ;;
    "build")
      shift
      exec "${bindir}/lib/zopen-build" $@
      ;;
    "clean")
      shift
      exec "${bindir}/lib/zopen-clean" $@
      ;;
    "download")
      shift
      exec "${bindir}/lib/zopen-install" $@
      ;;
    "generate")
      shift
      exec "${bindir}/lib/zopen-generate" $@
      ;;
    "help" | "-h" | "--h" | "-help" | "--help" | "-?" | "-syntax")
      printHelp "${args}"
      exit 0
      ;;
    "init")
      shift
      if $legacy; then
        exec "${bindir}/lib/zopen-init --legacy" $@
      else
        exec "${bindir}/lib/zopen-init" $@
      fi
      ;;
    "install" | "-i")
      shift
      exec "${bindir}/lib/zopen-install" $@
      ;;
    "list" | "-l")
      shift
      exec "${bindir}/lib/zopen-query" "--list" $@
      ;;
    "query" | "-q")
      shift
      exec "${bindir}/lib/zopen-query" $@
      ;;
    "remove" | "-r" | "uninstall" | "un" | "erase" | "e")
      shift
      exec "${bindir}/lib/zopen-remove" $@
      ;;
    "search" | "-s")
      shift
      exec "${bindir}/lib/zopen-query" --remote-search $@
      ;;
    "update-cacert")
      shift
      exec "${bindir}/lib/zopen-update-cacert" $@
      ;;
    "upgrade" | "up")
      shift
      exec "${bindir}/lib/zopen-install" -u $@
      ;;
    "--version")
      if [ "x$2" = "x" ]; then
        name=$ME
      else
        name="$2"
      fi
      exec "${bindir}/lib/zopen-version" $name 
      ;;
    *)
      printSoftError "Unknown option ${1} specified"
      printSyntax "${args}"
      exit 8
      ;;
  esac
  shift;
done

printHelp
