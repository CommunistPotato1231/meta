#!/bin/sh
#
# All zopen-* scripts MUST start with this code to maintain consistency
#
setupMyself()
{
        ME=$(basename $0)
        MYDIR="$( cd "$(dirname "$0")" >/dev/null 2>&1 && pwd -P )"
        INCDIR="${MYDIR}/../include"
        if ! [ -d "${INCDIR}" ] && ! [ -f "${INCDIR}/common.sh" ]; then
                echo "Internal Error. Unable to find common.sh file to source" >&2
                exit 8
        fi
        . "${INCDIR}/common.sh"
}
setupMyself

#
# Routine to generate man pages from the --help and --version for the various tools
#
# We may choose to use --extendedhelp if the --help output is too long for folks
#

printSyntax()
{
  echo "$ME will generate man pages from help and version information for zopen and zopen-* tools" >&2
  echo "Syntax: $ME DIRECTORY" >&2
  echo "  where DIRECTORY is the directory to write the man pages to (the directory needs to already exist)" >&2
}

if [[ $# -eq 1 ]]; then
  if [ "x$1" = "x--help" ]; then
    printSyntax
    exit 0
  elif [ "x$1" = "x--version" ]; then
    zopen --version $ME
    exit 0
  else
    mandir="$1"
  fi
else
  echo "Expected one parameter to be passed to $ME. $# were passed in. No action performed" >&2
  printSyntax
  exit 8
fi

set -e
export rootdir="$( cd "$MYDIR/../../" && dirname "$PWD" >/dev/null 2>&1 && pwd -P )"

help2manopts="--no-discard-stderr -N"

if ! [ -d "${mandir}" ]; then
  echo "The directory ${mandir} is invalid. No action performed" >&2
  printSyntax
  exit 8
fi

if [ "x${MYDIR}" = "x" ] || [ "x${rootdir}" = "x" ]; then
  echo "Internal error. Unable to determine version information" >&2
  exit 8
fi

tooldirs="${rootdir}/bin ${rootdir}/bin/lib"

echo "Man pages will be written to: ${mandir}"
for tooldir in ${tooldirs}; do
  for tool in $tooldir/zopen*; do
    basetool=$(basename ${tool})
    help2man ${help2manopts} "${tool}" >"${mandir}/${basetool}.1"
    if  $( "${tool}" --help >/dev/null 2>&1 ) ; then
      # Tool has implemented --help
      if  $( "${tool}" --version >/dev/null 2>&1 ) ; then
        echo "${basetool}"
      else 
        echo "${tool} supports --help but not --version options. man page generation skipped." >&2
      fi
    else 
      # Tool has NOT implemented --help
      if  $( "${tool}" --version >/dev/null 2>&1 ) ; then
        echo "${tool} does not support --help but does support man page generation skipped." >&2
      else 
        echo "${tool} does not support --help nor --version options. man page generation skipped." >&2
      fi
    fi
  done
done



