#!/bin/sh
#
# General purpose zopen script
#
ZOPEN_DONT_PROCESS_CONFIG=1
#
# All zopen-* scripts MUST start with this code to maintain consistency
#
setupMyself()
{
  ME=$(basename $0)
  MYDIR="$(cd "$(dirname "$0")" > /dev/null 2>&1 && pwd -P)"
  INCDIR="${MYDIR}/../include"
  if ! [ -d "${INCDIR}" ] && ! [ -f "${INCDIR}/common.sh" ]; then
    echo "Internal Error. Unable to find common.sh file to source" >&2
    exit 8
  fi
  . "${INCDIR}/common.sh"
}
setupMyself

printSyntax()
{
  printInfo "" >&2
  printInfo "Syntax: zopen [options] <command>" >&2
  printInfo "where <options> may be one of the following:" >&2
  printInfo "  --version       print product version" >&2
  printInfo "  --help          print this help" >&2
  printInfo "where <command> may be one of the following:" >&2
  printInfo "  init            generate \$rootfs/etc/zopen-config, creates file structure and bootstraps" >&2
  printInfo "  build           invokes the build script." >&2
  printInfo "  download        downloads z/OS Open Tools package(s)" >&2
  printInfo "  install         installs z/OS Open Tools package(s))" >&2
  printInfo "  generate        generate a zopen project" >&2
  printInfo "  update-cacert   update the cacert.pem file" >&2
  printInfo "  upgrade         upgrades already installed tools" >&2
  printInfo "  list            lists information about z/OS Open Tools packages" >&2
  printInfo "  query           queries z/OS Open Tools packages" >&2
  printInfo "  search          searches remote repo for z/OS Open Tools package" >&2
  printInfo "  remove          removes installed z/OS Open Tools packages" >&2
  printInfo "  alt             switch local versions of z/OS Open Tools packages" >&2
  printInfo "  clean           cleans various aspects of z/OS Open Tools packages" >&2
  echo "" >&2
}

printHelp()
{
  echo "zopen is a general purpose script to be used with the z/OS Open Tools ports." >&2
  printSyntax
  echo "Example usage:" >&2
  echo " # Install the 'which' utility package" >&2
  echo " zopen install which" >&2
  echo " # List available packages to download" >&2
  echo " zopen list" >&2
  echo " # List currently installed packages" >&2
  echo " zopen list --installed" >&2
  echo " # Generate a zopen template project" >&2
  echo " zopen generate" >&2
}

export PATH="${MYDIR}:${PATH}"

subopts=""
subcmd=""
help=false
version=false

for arg in $*; do
  case "${arg}" in
  "alt")
    subcmd='zopen-alt'
    ;;
  "build")
    subcmd='zopen-build'
    ;;
  "clean")
    subcmd='zopen-clean'
    ;;
  "download")
    subcmd='zopen-install'
    ;;
  "generate")
    subcmd='zopen-generate'
    ;;
  "init")
    subcmd='zopen-init'
    ;;
  "install")
    subcmd='zopen-install'
    ;;
  "query")
    subcmd='zopen-query'
    ;;
  "list")
    subcmd='zopen-query'
    subopts="${subopts} --list"
    ;;
  "search")
    subcmd='zopen-query'
    subopts="${subopts} --remote-search"
    ;;
  "remove")
    subcmd='zopen-remove'
    ;;
  "update-cacert")
    subcmd='zopen-update-cacert'
    ;;
  "upgrade")
    subcmd='zopen-install'
    subopts="${subopts} -u"
    ;;
  "--version")
    version=true
    ;;
  "--help")
    help=true
    ;;
  *)
    # let unknown stuff through
    subopts="${subopts} ${arg}"
    ;;
  esac
done

if [ -z "${subcmd}" ]; then
  if ${help}; then
    printHelp
    exit 0
  elif ${version}; then
    : # fall through
  else
    printSyntax
    exit 4
  fi
fi

if ${help}; then
  subopts="--help"
fi

if ${version}; then
  if [ -z "${subcmd}" ]; then
    subopts="${ME}"
  else
    subopts="${subcmd}"
  fi
  subcmd='zopen-version'
fi

${subcmd} ${subopts}
