"""
Script to generate a markdown file containing vulnerabilities in zopen packages.
For every package release with vulnerabilities, the file includes a dropdown menu of
all known vulnerabilities in that release, including CVE IDs and descriptions.
"""

from collections import defaultdict
import requests
import argparse

def format_quantities(cves):
    total = len(cves)
    critical = sum(1 for cve in cves if cve['severity'] == "CRITICAL")
    high = sum(1 for cve in cves if cve['severity'] == "HIGH")
    medium = sum(1 for cve in cves if cve['severity'] == "MEDIUM")
    low = sum(1 for cve in cves if cve['severity'] == "LOW")

    # Handle when all vulnerabilities have the same severity
    if total == 1:
        if critical == 1:
            return "1 critical vulnerability"
        elif high == 1:
            return "1 high vulnerability"
        elif medium == 1:
            return "1 medium vulnerability"
        elif low == 1:
            return "1 low vulnerability"
    elif critical == total:
        return f"{total} critical vulnerabilities"
    elif high == total:
        return f"{total} high vulnerabilities"
    elif medium == total:
        return f"{total} medium vulnerabilities"
    elif low == total:
        return f"{total} low vulnerabilities"

    # Handle when there are mutliple severities
    s = "1 vulnerability (" if total == 1 else f"{total} vulnerabilities ("
    first = True
    if critical > 0:
        s += f"{critical} critical"
        first = False
    if high > 0:
        if not first:
            s += ", "
        s += f"{high} high"
        first = False
    if medium > 0:
        if not first:
            s += ", "
        s += f"{medium} medium"
        first = False
    if low > 0:
        if not first:
            s += ", "
        s += f"{low} low"
        first = False
    s += ")"
    return s

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Generate markdown file for vulnerabilities in zopen packages')
    parser.add_argument('--output-file', '-o', dest='output_file', required=True, help='Output markdown file path')
    args = parser.parse_args()

    url = 'https://raw.githubusercontent.com/ZOSOpenTools/meta/main/docs/api/zopen_vulnerability.json'
    response = requests.get(url)
    data = response.json()

    package_vulns = {}
    for pkg, cves in data.items():
        # TODO: Remove this check once gitdummy is removed from zopen_vulnerability.json
        if pkg == 'gitdummy':
            continue
        if len(cves) == 0:
            continue

        package_vulns[pkg] = defaultdict(list)
        for cve in cves:
            name = cve['name']
            package_vulns[pkg][name].append(cve['CVEs'])

    with open(args.output_file, 'w') as file:
        file.write("# Package Vulnerabilities\n\n")
        for pkg, releases in package_vulns.items():
            file.write(f"## {pkg}\n\n")
            # List of releases for this package
            for release, cves in releases.items():
                # Dropdown for each release -- expand to show vulnerabilities
                file.write(f"<details>\n<summary>{release} -- {format_quantities(cves)}</summary>\n\n")
                for cve in cves:
                    # Bullet point for each vulnerability in this release
                    file.write(f"- **({cve['severity']} severity) {cve['id']}**: {cve['details']}\n")
                file.write("\n</details>\n\n")

        if len(package_vulns) == 0:
            file.write("There are currently no known vulnerabilities in any packages.")
