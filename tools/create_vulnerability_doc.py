"""
Script to generate a markdown file containing vulnerabilities in zopen packages.
For every package release with vulnerabilities, the file includes a dropdown menu of
all known vulnerabilities in that release, including CVE IDs and descriptions.
Also generates an XML file for an RSS feed of vulnerabilities.
"""

import requests
import argparse

BASE_URL = "https://raw.githubusercontent.com/zopencommunity/meta/main"

def format_quantities(cves):
    total = len(cves)
    critical = sum(1 for cve in cves if cve['severity'] == "CRITICAL")
    high = sum(1 for cve in cves if cve['severity'] == "HIGH")
    medium = sum(1 for cve in cves if cve['severity'] == "MEDIUM")
    low = sum(1 for cve in cves if cve['severity'] == "LOW")

    # Handle when all vulnerabilities have the same severity
    if total == 1:
        if critical == 1:
            return "1 critical vulnerability"
        elif high == 1:
            return "1 high vulnerability"
        elif medium == 1:
            return "1 medium vulnerability"
        elif low == 1:
            return "1 low vulnerability"
    elif critical == total:
        return f"{total} critical vulnerabilities"
    elif high == total:
        return f"{total} high vulnerabilities"
    elif medium == total:
        return f"{total} medium vulnerabilities"
    elif low == total:
        return f"{total} low vulnerabilities"

    # Handle when there are multiple severities
    s = "1 vulnerability (" if total == 1 else f"{total} vulnerabilities ("
    first = True
    if critical > 0:
        s += f"{critical} critical"
        first = False
    if high > 0:
        if not first:
            s += ", "
        s += f"{high} high"
        first = False
    if medium > 0:
        if not first:
            s += ", "
        s += f"{medium} medium"
        first = False
    if low > 0:
        if not first:
            s += ", "
        s += f"{low} low"
        first = False
    s += ")"
    return s

def parse_release_url(url):
    release = url.split('/')[-2]
    prefix = url.split('/download/')[0]
    return f"{prefix}/tag/{release}"

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Generate markdown file for vulnerabilities in zopen packages')
    parser.add_argument('--md-output-file', dest='md_output_file', required=True, help='Output markdown file path')
    parser.add_argument('--xml-output-file', dest='xml_output_file', required=True, help='Output RSS XML file path')
    args = parser.parse_args()

    vulns_url = f"{BASE_URL}/docs/api/zopen_vulnerability.json"
    vulns_res = requests.get(vulns_url)
    vulns_json = vulns_res.json()
    releases_url = f"{BASE_URL}/docs/api/zopen_releases.json"
    releases_res = requests.get(releases_url)
    releases_json = releases_res.json()
    latest_releases_url = f"{BASE_URL}/docs/api/zopen_releases_latest.json"
    latest_releases_res = requests.get(latest_releases_url)
    latest_releases_json = latest_releases_res.json()

    package_vulns = {}
    for pkg, releases in vulns_json.items():
        package_vulns[pkg] = {}
        for release, info in releases.items():
            package_vulns[pkg][info['release_name']] = info['CVEs']

    release_urls = {}
    latest_release_info = {}
    for vuln_pkg, vuln_releases in package_vulns.items():
        # Get release urls for all of the releases with vulnerabilities for this package
        for release in releases_json['release_data'].get(vuln_pkg, []):
            if release['name'] in vuln_releases:
                release_urls[release['name']] = parse_release_url(release['assets'][0]['url'])
        # Get information about latest release (name, url, CVE ids)
        latest_release = latest_releases_json['release_data'].get(vuln_pkg)[0]
        info = {
            "name": latest_release['name'],
            "url": parse_release_url(latest_release['assets'][0]['url']),
            "cve_ids": set(cve['id'] for cve in vuln_releases.get(latest_release['name'], [])),
        }
        latest_release_info[vuln_pkg] = info

    with open(args.md_output_file, 'w') as md_file, open(args.xml_output_file, 'w') as xml_file:
        md_file.write((
            "# Package Vulnerabilities\n\n"
            "[Vulnerabilities RSS feed XML file](https://raw.githubusercontent.com/zopencommunity/meta/main/docs/vulnerabilities_rss.xml)\n\n"
        ))
        xml_file.write((
            '<?xml version="1.0" encoding="UTF-8" ?>\n'
            '<rss version="2.0">\n\n'
            '<channel>\n'
            '<title>zopen community Vulnerabilities</title>\n'
            '<link>https://zopen.community/#/Vulnerabilities</link>\n'
            '<description>Vulnerabilities in zopen community Packages</description>\n\n'
        ))

        for pkg, releases in package_vulns.items():
            md_file.write(f"## {pkg}\n\n")
            # List of releases for this package
            for release, cves in reversed(releases.items()):
                # Dropdown for each release -- expand to show vulnerabilities
                md_file.write(f"<details>\n<summary>{release} -- {format_quantities(cves)}</summary>\n\n")

                # Url of release page and url of latest release (if this is not the latest release)
                md_file.write(f"- Affected release URL: [{release}]({release_urls[release]})\n\n")
                latest_release = latest_release_info[pkg]

                for cve in cves:
                    # Bullet point for each vulnerability in this release
                    md_file.write(f"- **({cve['severity']} severity) {cve['id']}**: {cve['details']}\n")
                    # Show if this vulnerability is resolved in the latest release
                    if release == latest_release_info[pkg]['name']:
                        md_file.write("  - **Currently no fix -- this is the latest release**.")
                    else:
                        if cve['id'] not in latest_release_info[pkg]['cve_ids']:
                            md_file.write(f"  - **This vulnerability is resolved in the [latest release]({latest_release['url']})**.\n")
                        else:
                            md_file.write(f"  - **Currently no fix -- still affects the [latest release]({latest_release['url']})**.\n")
                md_file.write("\n</details>\n\n")

                # Add item for this release to RSS XML file
                num_vulns_str = "1 vulnerability" if len(cves) == 1 else f"{len(cves)} vulnerabilities"
                xml_file.write((
                    "<item>\n"
                    f"<title>{release}</title>\n"
                    f"<link>https://zopen.community/#/Vulnerabilities?id={pkg}</link>\n"
                    f"<description>{format_quantities(cves)}</description>\n"
                    f"<guid isPermaLink=\"false\">{release}</guid>\n"
                    "</item>\n\n"
                ))

        if len(package_vulns) == 0:
            md_file.write("There are currently no known vulnerabilities in any packages.")
        xml_file.write("</channel>\n\n</rss>")
