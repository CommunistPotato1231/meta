// Inputs:
//   PORT_GITHUB_REPO : Github repository (e.g. https://github.com/ZOSOpenTools/makeport.git)
//   PORT_BRANCH : (default: main)
//   PORT_DESCRIPTION : Description of the project
//   RELEASE_LEVEL: Main or Release line to build against (default: Release)
//   FORCE_CLANG : Boolean to enforce building with Clang vs xlclang
//   NO_PROMOTE : Boolean, if true, avoid promotion
import org.jenkinsci.plugins.workflow.support.steps.build.RunWrapper

@NonCPS
String getLogFromRunWrapper(RunWrapper runWrapper, int logLines) {
    runWrapper.getRawBuild().getLog(logLines).join('\n')
}

def repo = params.get("PORT_GITHUB_REPO")
def branch = params.get("PORT_BRANCH")
def description = params.get("PORT_DESCRIPTION")
def release_level = params.get("RELEASE_LEVEL")  // Mainline or Releaseline

RunWrapper buildResult;
RunWrapper promoteResult;
def testStatus = "Skipped"

node('linux')
{
  stage('Build and Test') {
    // Build Job : https://163.74.88.212:8443/view/Framework/job/Port-Build/
    buildResult = build job: 'Port-Build', propagate: false, parameters: [string(name: 'PORT_GITHUB_REPO', value: "${repo}"),
                   string(name: 'PORT_BRANCH', value: "${branch}"),
                   booleanParam(name: 'FORCE_CLANG', value: params.FORCE_CLANG),
                   string(name: 'RELEASE_LEVEL', value: "${release_level}"),
                   ]
    def result = buildResult.getResult()
    if(result == "FAILURE"){
      handleError("Build/Test stage failed. View details in ${buildResult.absoluteUrl}", repo, getLogFromRunWrapper(buildResult, 50));
    }
    copyArtifacts filter: '**/test.status',
        fingerprintArtifacts: true,
        projectName: 'Port-Build',
        selector: specific(buildResult.number.toString()),
        optional: true
    def testStatusFile = sh(script: 'find . -name test.status | head -n 1', returnStdout: true).trim()
    if (testStatusFile != '') {
        testStatus = readFile file: testStatusFile
    }
    deleteDir()
  }
  
  stage('Promote') {
      if(!params.NO_PROMOTE) {
              // Publish Job : https://163.74.88.212:8443/view/Framework/job/Port-Publish/
              promoteResult = build job: 'Port-Publish', propagate: false, parameters:
                 [string(name: 'BUILD_SELECTOR', value: "<SpecificBuildSelector plugin=\"copyartifact@1.46.2\">  <buildNumber>${buildResult.number.toString()}</buildNumber></SpecificBuildSelector>"),
                 string(name: 'PORT_GITHUB_REPO', value: "${repo}"), string(name: 'PORT_DESCRIPTION', value: "${description}"),
                 string(name: 'RELEASE_LEVEL', value: "${release_level}")
                 ]
              result = promoteResult.getResult()
              if(result == "FAILURE"){
                handleError("Promote stage failed. View details in <${promoteResult.absoluteUrl}", repo, getLogFromRunWrapper(promoteResult, 50));
              }
        }
  }

  stage ('Cleanup') {
     def latestRelease = repo.replaceAll('.git$', "/releases/latest")
     def extraText;
    if (params.NO_PROMOTE)
        extraText = "\nBuilt with NO_PROMOTE set to true."
    else
        extraText = "\nRelease published to: ${latestRelease}\nProgress page updated: https://zosopentools.github.io/meta/#/Progress"
        
    if (params.FORCE_CLANG)
        extraText += "\nBuilt with FORCE_CLANG set to true."
     def slackResponse = slackSend color: 'good', 
        message: "Build for ${repo} (${release_level}) *successful* <${currentBuild.absoluteUrl}|Build #${currentBuild.number}>\n*Test Status:* ${testStatus}${extraText}"
  }
}

def handleError(reason, repo, output="none") {
  def extraText = ""
  if (params.FORCE_CLANG)
    extraText += "\nBuilt with FORCE_CLANG set to true."
  def message = "${repo} (${release_level}):${extraText}\n<${currentBuild.absoluteUrl}|Build #${currentBuild.number}> *Failed*\n*Reason:* ${reason}\nLast 50 lines of output:\n```${output}```"
  def attachments = [
    [
      text: message,
      fallback: 'Fallback',
      color: 'danger'
    ]
  ]
  slackSend(attachments: attachments)
  error "Job failed..."
}
